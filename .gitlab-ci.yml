# This file is a template, and might need editing before it works on your project.
# Select image from https://hub.docker.com/_/php/
image: registry.pentacore.se/toolbox/php-7.4-build

stages:
  - build
  - docker
  - deploy
  # Select what we should cache between builds
cache:
  paths:
    - web/vendor
    - web/node_modules
    - .composer

build:resources:
  script:
    - cd web && COMPOSER_CACHE_DIR=".composer" composer install --no-dev --ignore-platform-reqs -vvv
    - npm install
    - npm run prod
    - cd ..
  stage: build

docker:web:
  stage: docker
  services:
    - docker:dind
  dependencies:
    - build:resources
  needs:
    - build:resources
  only: 
    - master
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

docker:db:
  stage: docker
  services:
    - docker:dind
  only:
    refs:
      - master
    changes:
      - db/**/*
      - db/*
      - .gitlab-ci.yml
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE/db" .
    - docker push "$CI_REGISTRY_IMAGE/db"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

docker:branch-web:
  stage: docker
  services:
    - docker:dind
  except:
    - master
  dependencies:
    - build:resources
  needs:
    - build:resources
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

docker:branch-db:
  stage: docker
  services:
    - docker:dind
  except:
    - master
  only:
    changes:
      - db/**/*
      - db/*
      - .gitlab-ci.yml
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE/db" .
    - docker push "$CI_REGISTRY_IMAGE/db"
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

deploy:prod:
  stage: deploy
  services:
    - docker:dind
  only:
    - master
  when: manual
  environment:
    name: prod
    url: https://hd.chalmers.se
  needs:
    - docker:web
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - ssh-add <(echo "$HD_SSH_PRIV_KEY")
    - /root/.composer/vendor/bin/envoy run prod-deploy --docker_user="$CI_REGISTRY_USER" --docker_password="$CI_REGISTRY_PASSWORD" --docker_registry=$CI_REGISTRY

deploy:staging:
  stage: deploy
  when: manual
  only:
    - master
  environment:
    name: staging
    url: https://staging.hd.chalmers.se
  services:
    - docker:dind
  needs:
    - docker:web
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - ssh-add <(echo "$HD_SSH_PRIV_KEY")
    - /root/.composer/vendor/bin/envoy run staging-deploy --docker_user="$CI_REGISTRY_USER" --docker_password="$CI_REGISTRY_PASSWORD" --docker_registry="$CI_REGISTRY"